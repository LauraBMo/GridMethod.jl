var documenterSearchIndex = {"docs":
[{"location":"utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"norms_const/#Norms-and-constants","page":"Norms and constants","title":"Norms and constants","text":"","category":"section"},{"location":"tree/","page":"Tree fractal","title":"Tree fractal","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"tree/#Cross-Tree-fractal-in-cube","page":"Tree fractal","title":"Cross-Tree fractal in cube","text":"","category":"section"},{"location":"tree/","page":"Tree fractal","title":"Tree fractal","text":"The nodes of the grid form the leaves of a cross-form tree fractal.   The tree function generates the Nth level leaves of a tree fractal with dim dimensions.    It generates new points for the fractal iteratively.","category":"page"},{"location":"tree/#Tree-fractal","page":"Tree fractal","title":"Tree fractal","text":"","category":"section"},{"location":"tree/","page":"Tree fractal","title":"Tree fractal","text":"(Image: Tree fractal in 2D)","category":"page"},{"location":"tree/","page":"Tree fractal","title":"Tree fractal","text":"See Image code","category":"page"},{"location":"tree/#Documentation","page":"Tree fractal","title":"Documentation","text":"","category":"section"},{"location":"tree/","page":"Tree fractal","title":"Tree fractal","text":"Modules = [GridMethod]\nPages   = [\"Tree.jl\"]\nPrivate = false","category":"page"},{"location":"tree/#GridMethod.findnextleaves-Tuple{Any, GridMethod.Tree}","page":"Tree fractal","title":"GridMethod.findnextleaves","text":"findnextleaves(i, tree::Tree)\n\nReturns the 2^d nodes of tree which branched from the i-th node of the previous tree in the recursive construction. Assumes nodes ordered as given by uptree!.\n\n\n\n\n\n","category":"method"},{"location":"tree/#GridMethod.tree-Tuple{GridMethod.Tree, Any}","page":"Tree fractal","title":"GridMethod.tree","text":"tree(root::Tree, N)\n\nReturns the Nth leaves of a 2^d-branched tree in a d-dimensional space with root root, where N is the number of times the root-tree should be recursively branched into directions dirs.\n\nKeyword arguments:\n\nratio: The ratio between the length of the recursively branched.\ndirs: The possible directions in which the next leaves can be generated.\n\n\n\n\n\n","category":"method"},{"location":"tree/#GridMethod.uptree!-Tuple{GridMethod.Tree}","page":"Tree fractal","title":"GridMethod.uptree!","text":"uptree!(tree)\n\nReturns the next iteration of tree.\n\n\n\n\n\n","category":"method"},{"location":"tree/#Image-code","page":"Tree fractal","title":"Image code","text":"","category":"section"},{"location":"tree/","page":"Tree fractal","title":"Tree fractal","text":"Code used to generate image Tree fractal.","category":"page"},{"location":"tree/","page":"Tree fractal","title":"Tree fractal","text":"using Plots\nusing GridMethod\n\nfunction plot_lines!(P, N, w, dw, c, dc)\n    w₀, c₀ = w, c\n    tree = GridMethod.tree()\n    @gif for _ in 1:N\n        old_tree = copy(tree)\n        uptree!(tree)\n        for (i, p) in old_tree\n            for q in findnextleaves(i, tree)\n                pp = [p, q, [NaN, NaN]]\n                plot!(P, first.(pp), last.(pp), line = (:black, w₀, c₀))\n            end\n        end\n        w₀ += dw\n        c₀ += dc\n    end every 1\nend\n\nP = plot(1,\n         legend = false,\n         color = :black,\n         xlim = (-1, 1),\n         ylim = (-1, 1),\n         );\nplot_lines!(P, 7, .5, 2.3, -.4, .75, -.11)\ndisplay(P)","category":"page"},{"location":"grid_refine/#The-grid-and-refining-it","page":"Grid and refine","title":"The grid and refining it","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = GridMethod","category":"page"},{"location":"#GridMethod","page":"Introduction","title":"GridMethod","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Documentation for GridMethod.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This is a project aiming at implementing the Grid Method theoretically developed by Bürgisser, Cucker, Krick, Lairez, Shub and Tonelli-Cueto.  The aim of this project is to develop parallelizable algorithms for solving real polynomial systems and computing the topology of real algebraic and semialgebraic sets...","category":"page"},{"location":"#Contents","page":"Introduction","title":"Contents","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Problem formulation","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"modelingkits.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The grid","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"grid_refine.md\",\n    \"cubeHan.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Cross-tree fractal","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"tree.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Norms and constants","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"norms_const.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Utils","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"utils.md\",\n]\nDepth = 2","category":"page"},{"location":"modelingkits/#Modeling-kits","page":"Modeling Kits","title":"Modeling kits","text":"","category":"section"},{"location":"modelingkits/","page":"Modeling Kits","title":"Modeling Kits","text":"We do not implement a modeling language. Instead, we offer easily to build compatibility with your favorite system. Available packages are HomotopyContinuation.ModelKit.jl and ModelingToolkit.jl. See their configuration files HC.ModelKit.jl and ModelingToolkit.jl.","category":"page"},{"location":"modelingkits/","page":"Modeling Kits","title":"Modeling Kits","text":"Modules = [GridMethod]\nPages   = [\"HC.ModelKit.jl\", \"ModelingToolkit.jl\"]","category":"page"},{"location":"cubeHan/#Dividing-the-cube-under-Han-condition","page":"Cube – Han","title":"Dividing the cube under Han condition","text":"","category":"section"}]
}
